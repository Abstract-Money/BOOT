use boot_core::*;
use boot_cw_plus::{Cw20QueryMsgFns, CwPlus};
use cosmwasm_std::Addr;
use cw20::Cw20Coin;

// shows how to deploy CwPlus to a mock environment
fn main() -> anyhow::Result<()> {
    // set a sender address
    let sender = Addr::unchecked("test_sender");
    // get the mock environment
    let (_, mock) = instantiate_default_mock_env(&sender)?;
    // deploy the cw-plus contracts
    let cw_plus = CwPlus::deploy_on(mock.clone(), Empty {})?;
    // get the cw20_base contract
    let cw20_base = cw_plus.cw20_base;
    // instantiate an instance of it
    let cw20_init_msg = cw20_base::msg::InstantiateMsg {
        decimals: 6,
        name: "Test Token".to_string(),
        initial_balances: vec![Cw20Coin {
            address: sender.to_string(),
            amount: 1000000u128.into(),
        }],
        marketing: None,
        mint: None,
        symbol: "TEST".to_string(),
    };
    cw20_base.instantiate(&cw20_init_msg, None, None)?;

    // query balance after init
    // notice that this query is generated by the macro and not defined in the object itself!
    let balance = cw20_base.balance(sender.to_string())?;
    assert_eq!(balance.balance.u128(), 1000000u128.into());

    Ok(())
}
